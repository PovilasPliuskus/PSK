// <auto-generated />
using System;
using DataAccess.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace DataAccess.Migrations
{
    [DbContext(typeof(TaskManagerContext))]
    partial class TaskManagerContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("DataAccess.Entities.AttachmentEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("FkCreatedByUserEmail")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<Guid?>("FkSubTaskId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("FkTaskId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("SubTaskEntityId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("TaskEntityId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("FkSubTaskId");

                    b.HasIndex("FkTaskId");

                    b.HasIndex("SubTaskEntityId");

                    b.HasIndex("TaskEntityId");

                    b.ToTable("Attachment");
                });

            modelBuilder.Entity("DataAccess.Entities.CommentEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("Edited")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("FkSubTaskId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("FkTaskId")
                        .HasColumnType("uuid");

                    b.Property<string>("FkWrittenByUserEmail")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<Guid?>("SubTaskEntityId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("TaskEntityId")
                        .HasColumnType("uuid");

                    b.Property<string>("Text")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("FkSubTaskId");

                    b.HasIndex("FkTaskId");

                    b.HasIndex("SubTaskEntityId");

                    b.HasIndex("TaskEntityId");

                    b.ToTable("Comment");
                });

            modelBuilder.Entity("DataAccess.Entities.SubTaskEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(5000)
                        .HasColumnType("character varying(5000)");

                    b.Property<DateTime?>("DueDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Estimate")
                        .HasColumnType("integer");

                    b.Property<string>("FkAssignedToUserEmail")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("FkCreatedByUserEmail")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<Guid>("FkTaskId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("Priority")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<Guid?>("TaskEntityId")
                        .HasColumnType("uuid");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("FkTaskId");

                    b.HasIndex("TaskEntityId");

                    b.ToTable("SubTask");
                });

            modelBuilder.Entity("DataAccess.Entities.TaskEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(5000)
                        .HasColumnType("character varying(5000)");

                    b.Property<DateTime?>("DueDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Estimate")
                        .HasColumnType("integer");

                    b.Property<string>("FkAssignedToUserEmail")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("FkCreatedByUserEmail")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<Guid>("FkWorkspaceId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("Priority")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("WorkspaceEntityId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("FkWorkspaceId");

                    b.HasIndex("WorkspaceEntityId");

                    b.ToTable("Task");
                });

            modelBuilder.Entity("DataAccess.Entities.WorkspaceEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("FkCreatedByUserEmail")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Workspace");
                });

            modelBuilder.Entity("DataAccess.Entities.WorkspaceUsersEntity", b =>
                {
                    b.Property<string>("FkUserEmail")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<Guid>("FkWorkspaceId")
                        .HasColumnType("uuid");

                    b.HasKey("FkUserEmail", "FkWorkspaceId");

                    b.HasIndex("FkWorkspaceId");

                    b.ToTable("WorkspaceUsers");
                });

            modelBuilder.Entity("DataAccess.Entities.AttachmentEntity", b =>
                {
                    b.HasOne("DataAccess.Entities.SubTaskEntity", "SubTask")
                        .WithMany()
                        .HasForeignKey("FkSubTaskId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DataAccess.Entities.TaskEntity", "Task")
                        .WithMany()
                        .HasForeignKey("FkTaskId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DataAccess.Entities.SubTaskEntity", null)
                        .WithMany("Attachments")
                        .HasForeignKey("SubTaskEntityId");

                    b.HasOne("DataAccess.Entities.TaskEntity", null)
                        .WithMany("Attachments")
                        .HasForeignKey("TaskEntityId");

                    b.Navigation("SubTask");

                    b.Navigation("Task");
                });

            modelBuilder.Entity("DataAccess.Entities.CommentEntity", b =>
                {
                    b.HasOne("DataAccess.Entities.SubTaskEntity", "SubTask")
                        .WithMany()
                        .HasForeignKey("FkSubTaskId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DataAccess.Entities.TaskEntity", "Task")
                        .WithMany()
                        .HasForeignKey("FkTaskId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DataAccess.Entities.SubTaskEntity", null)
                        .WithMany("Comments")
                        .HasForeignKey("SubTaskEntityId");

                    b.HasOne("DataAccess.Entities.TaskEntity", null)
                        .WithMany("Comments")
                        .HasForeignKey("TaskEntityId");

                    b.Navigation("SubTask");

                    b.Navigation("Task");
                });

            modelBuilder.Entity("DataAccess.Entities.SubTaskEntity", b =>
                {
                    b.HasOne("DataAccess.Entities.TaskEntity", "Task")
                        .WithMany()
                        .HasForeignKey("FkTaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccess.Entities.TaskEntity", null)
                        .WithMany("SubTasks")
                        .HasForeignKey("TaskEntityId");

                    b.Navigation("Task");
                });

            modelBuilder.Entity("DataAccess.Entities.TaskEntity", b =>
                {
                    b.HasOne("DataAccess.Entities.WorkspaceEntity", "Workspace")
                        .WithMany()
                        .HasForeignKey("FkWorkspaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccess.Entities.WorkspaceEntity", null)
                        .WithMany("Tasks")
                        .HasForeignKey("WorkspaceEntityId");

                    b.Navigation("Workspace");
                });

            modelBuilder.Entity("DataAccess.Entities.WorkspaceUsersEntity", b =>
                {
                    b.HasOne("DataAccess.Entities.WorkspaceEntity", null)
                        .WithMany()
                        .HasForeignKey("FkWorkspaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DataAccess.Entities.SubTaskEntity", b =>
                {
                    b.Navigation("Attachments");

                    b.Navigation("Comments");
                });

            modelBuilder.Entity("DataAccess.Entities.TaskEntity", b =>
                {
                    b.Navigation("Attachments");

                    b.Navigation("Comments");

                    b.Navigation("SubTasks");
                });

            modelBuilder.Entity("DataAccess.Entities.WorkspaceEntity", b =>
                {
                    b.Navigation("Tasks");
                });
#pragma warning restore 612, 618
        }
    }
}
