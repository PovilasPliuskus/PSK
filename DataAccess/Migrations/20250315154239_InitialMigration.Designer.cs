// <auto-generated />
using System;
using DataAccess.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace DataAccess.Migrations
{
    [DbContext(typeof(TaskManagerContext))]
    [Migration("20250315154239_InitialMigration")]
    partial class InitialMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("DataAccess.Entities.AttachmentEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<Guid>("FkCreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("FkSubTaskId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("FkTaskId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("FkCreatedByUserId");

                    b.HasIndex("FkSubTaskId");

                    b.HasIndex("FkTaskId");

                    b.ToTable("Attachment");
                });

            modelBuilder.Entity("DataAccess.Entities.CommentEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("Edited")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("FkSubTaskId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("FkTaskId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("FkWrittenByUserId")
                        .HasColumnType("uuid");

                    b.Property<string>("Text")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("FkSubTaskId");

                    b.HasIndex("FkTaskId");

                    b.HasIndex("FkWrittenByUserId");

                    b.ToTable("Comment");
                });

            modelBuilder.Entity("DataAccess.Entities.SubTaskEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(5000)
                        .HasColumnType("character varying(5000)");

                    b.Property<DateTime?>("DueDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Estimate")
                        .HasColumnType("integer");

                    b.Property<Guid?>("FkAssignedToUserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("FkCreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("FkTaskId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("Priority")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("FkAssignedToUserId");

                    b.HasIndex("FkCreatedByUserId");

                    b.HasIndex("FkTaskId");

                    b.ToTable("SubTask");
                });

            modelBuilder.Entity("DataAccess.Entities.TaskEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(5000)
                        .HasColumnType("character varying(5000)");

                    b.Property<DateTime?>("DueDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Estimate")
                        .HasColumnType("integer");

                    b.Property<Guid?>("FkAssignedToUserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("FkCreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("FkWorkspaceId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("Priority")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("FkAssignedToUserId");

                    b.HasIndex("FkCreatedByUserId");

                    b.HasIndex("FkWorkspaceId");

                    b.ToTable("Task");
                });

            modelBuilder.Entity("DataAccess.Entities.UserEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("StudentId")
                        .IsRequired()
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("StudentId")
                        .IsUnique();

                    b.ToTable("User");
                });

            modelBuilder.Entity("DataAccess.Entities.WorkspaceEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("FkCreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("FkCreatedByUserId");

                    b.ToTable("Workspace");
                });

            modelBuilder.Entity("DataAccess.Entities.WorkspaceUsersEntity", b =>
                {
                    b.Property<Guid>("FkUserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("FkWorkspaceId")
                        .HasColumnType("uuid");

                    b.HasKey("FkUserId", "FkWorkspaceId");

                    b.HasIndex("FkWorkspaceId");

                    b.ToTable("WorkspaceUsers");
                });

            modelBuilder.Entity("DataAccess.Entities.AttachmentEntity", b =>
                {
                    b.HasOne("DataAccess.Entities.UserEntity", "CreatedByUserId")
                        .WithMany()
                        .HasForeignKey("FkCreatedByUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccess.Entities.SubTaskEntity", "SubTask")
                        .WithMany()
                        .HasForeignKey("FkSubTaskId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DataAccess.Entities.TaskEntity", "Task")
                        .WithMany()
                        .HasForeignKey("FkTaskId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("CreatedByUserId");

                    b.Navigation("SubTask");

                    b.Navigation("Task");
                });

            modelBuilder.Entity("DataAccess.Entities.CommentEntity", b =>
                {
                    b.HasOne("DataAccess.Entities.SubTaskEntity", "SubTask")
                        .WithMany()
                        .HasForeignKey("FkSubTaskId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DataAccess.Entities.TaskEntity", "Task")
                        .WithMany()
                        .HasForeignKey("FkTaskId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DataAccess.Entities.UserEntity", "WrittenByUserId")
                        .WithMany()
                        .HasForeignKey("FkWrittenByUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SubTask");

                    b.Navigation("Task");

                    b.Navigation("WrittenByUserId");
                });

            modelBuilder.Entity("DataAccess.Entities.SubTaskEntity", b =>
                {
                    b.HasOne("DataAccess.Entities.UserEntity", "AssignedToUserId")
                        .WithMany()
                        .HasForeignKey("FkAssignedToUserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("DataAccess.Entities.UserEntity", "CreatedByUserId")
                        .WithMany()
                        .HasForeignKey("FkCreatedByUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccess.Entities.TaskEntity", "Task")
                        .WithMany()
                        .HasForeignKey("FkTaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AssignedToUserId");

                    b.Navigation("CreatedByUserId");

                    b.Navigation("Task");
                });

            modelBuilder.Entity("DataAccess.Entities.TaskEntity", b =>
                {
                    b.HasOne("DataAccess.Entities.UserEntity", "AssignedToUserId")
                        .WithMany()
                        .HasForeignKey("FkAssignedToUserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("DataAccess.Entities.UserEntity", "CreatedByUserId")
                        .WithMany()
                        .HasForeignKey("FkCreatedByUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccess.Entities.WorkspaceEntity", "Workspace")
                        .WithMany()
                        .HasForeignKey("FkWorkspaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AssignedToUserId");

                    b.Navigation("CreatedByUserId");

                    b.Navigation("Workspace");
                });

            modelBuilder.Entity("DataAccess.Entities.WorkspaceEntity", b =>
                {
                    b.HasOne("DataAccess.Entities.UserEntity", "CreatedByUserId")
                        .WithMany()
                        .HasForeignKey("FkCreatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CreatedByUserId");
                });

            modelBuilder.Entity("DataAccess.Entities.WorkspaceUsersEntity", b =>
                {
                    b.HasOne("DataAccess.Entities.UserEntity", null)
                        .WithMany()
                        .HasForeignKey("FkUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccess.Entities.WorkspaceEntity", null)
                        .WithMany()
                        .HasForeignKey("FkWorkspaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
